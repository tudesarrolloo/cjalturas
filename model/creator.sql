-- MySQL Script generated by MySQL Workbench
-- 08/01/18 22:46:31
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema cjalturas
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `cjalturas` ;

-- -----------------------------------------------------
-- Schema cjalturas
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `cjalturas` DEFAULT CHARACTER SET utf8 ;
USE `cjalturas` ;

-- -----------------------------------------------------
-- Table `cjalturas`.`rol`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cjalturas`.`rol` (
  `code_rol` VARCHAR(5) NOT NULL COMMENT 'Código que identifica el rol que puede tener un usuario de la aplicación',
  `rol` VARCHAR(20) NOT NULL COMMENT 'Descripción del usuario de la aplicación',
  PRIMARY KEY (`code_rol`))
ENGINE = InnoDB
COMMENT = 'Almacena la información de los roles que pueden tener los usuarios de la aplicación';


-- -----------------------------------------------------
-- Table `cjalturas`.`person`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cjalturas`.`person` (
  `id_person` INT NOT NULL AUTO_INCREMENT,
  `documentType` VARCHAR(20) NOT NULL COMMENT 'Tipo de documento de la persona puede ser: Cédula de Ciudadanía, Cédula Extranjería, Pasaporte, Tarjeta de Identidad',
  `document` VARCHAR(20) NOT NULL COMMENT 'Número del documento de la persona',
  `name` VARCHAR(60) NOT NULL COMMENT 'Nombre de la persona',
  `lastname` VARCHAR(60) NOT NULL COMMENT 'Apellidos de la persona',
  `phone` VARCHAR(20) NULL COMMENT 'Teléfono de contacto de la persona',
  `email` VARCHAR(60) NULL COMMENT 'Dirección de correo electrónico de la persona',
  PRIMARY KEY (`id_person`))
ENGINE = InnoDB
COMMENT = 'Almacena la información de las personas que tienen algún rol en la aplicación';


-- -----------------------------------------------------
-- Table `cjalturas`.`user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cjalturas`.`user` (
  `id_user` INT NOT NULL,
  `id_person` INT NOT NULL COMMENT 'Persona popietaria del usuario',
  `username` VARCHAR(60) NOT NULL COMMENT 'Nombre del usuario que se usará para acceder a la aplicación',
  `password` VARCHAR(20) NOT NULL COMMENT 'Contraseña para acceder al sisitema',
  `enabled` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Determina si el usuario se encuentra activo para ingresar a la aplicación, por defecto siempre estará activo',
  `code_rol` VARCHAR(5) NOT NULL,
  PRIMARY KEY (`id_user`),
  INDEX `fk_user_rol_idx` (`code_rol` ASC),
  INDEX `fk_user_person_idx` (`id_person` ASC),
  CONSTRAINT `fk_user_rol`
    FOREIGN KEY (`code_rol`)
    REFERENCES `cjalturas`.`rol` (`code_rol`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_person`
    FOREIGN KEY (`id_person`)
    REFERENCES `cjalturas`.`person` (`id_person`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Almacena la información de los usuarios de la aplicación';


-- -----------------------------------------------------
-- Table `cjalturas`.`permit`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cjalturas`.`permit` (
  `id_permit` INT NOT NULL AUTO_INCREMENT,
  `code_rol` VARCHAR(5) NOT NULL COMMENT 'Código del rol al que se le está otorgando el permiso',
  `resource` VARCHAR(60) NOT NULL COMMENT 'Recurso de la aplicación al que se le está otorgando el permiso',
  PRIMARY KEY (`id_permit`),
  INDEX `fk_permit_rol_idx` (`code_rol` ASC),
  CONSTRAINT `fk_permit_rol`
    FOREIGN KEY (`code_rol`)
    REFERENCES `cjalturas`.`rol` (`code_rol`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Permisos de acceso sobre los recursos de la aplicación que se le conceden a un rol de la aplicación';


-- -----------------------------------------------------
-- Table `cjalturas`.`course`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cjalturas`.`course` (
  `id_course` INT NOT NULL AUTO_INCREMENT,
  `course` VARCHAR(20) NOT NULL COMMENT 'Nombre del curso de formación',
  PRIMARY KEY (`id_course`))
ENGINE = InnoDB
COMMENT = 'Administra los cursos de formación que ofrece la empresa';


-- -----------------------------------------------------
-- Table `cjalturas`.`economicSector`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cjalturas`.`economicSector` (
  `id_economicSector` INT NOT NULL AUTO_INCREMENT,
  `economicSector` VARCHAR(20) NOT NULL COMMENT 'Descripción del sector económico',
  PRIMARY KEY (`id_economicSector`))
ENGINE = InnoDB
COMMENT = 'Administra los sectores económicos a los  que puede pertencer un aprendiz.';


-- -----------------------------------------------------
-- Table `cjalturas`.`enterprise`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cjalturas`.`enterprise` (
  `id_enterprise` INT NOT NULL AUTO_INCREMENT,
  `nit` VARCHAR(20) NOT NULL COMMENT 'Nit correspondiente a la empresa',
  `name` VARCHAR(200) NOT NULL COMMENT 'Nombre o razón social de la empresa',
  `phone` VARCHAR(30) NULL COMMENT 'Teléfono para contactar con la empresa',
  `contactName` VARCHAR(60) NULL COMMENT 'Nombre de la persona que es el contacto en la empresa',
  PRIMARY KEY (`id_enterprise`))
ENGINE = InnoDB
COMMENT = 'Administra las posibles empresas para las cuales se han bridado cursos.';


-- -----------------------------------------------------
-- Table `cjalturas`.`learner`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cjalturas`.`learner` (
  `id_learner` INT NOT NULL AUTO_INCREMENT,
  `id_person` INT NOT NULL,
  `id_enterprise` INT NULL COMMENT 'Empresa en la que labora el aprendiz, podrá ser nula en el caso de que se trate de una persona independiente.',
  `id_economicSector` INT NULL COMMENT 'Sector económico al que pertenece el aprendiz.',
  PRIMARY KEY (`id_learner`),
  INDEX `fk_learner_enterprise_idx` (`id_enterprise` ASC),
  INDEX `fk_learner_economicSector_idx` (`id_economicSector` ASC),
  INDEX `fk_learner_person_idx` (`id_person` ASC),
  CONSTRAINT `fk_learner_enterprise`
    FOREIGN KEY (`id_enterprise`)
    REFERENCES `cjalturas`.`enterprise` (`id_enterprise`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_learner_economicSector`
    FOREIGN KEY (`id_economicSector`)
    REFERENCES `cjalturas`.`economicSector` (`id_economicSector`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_learner_person`
    FOREIGN KEY (`id_person`)
    REFERENCES `cjalturas`.`person` (`id_person`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Almacena la información de los aprendices registrados en la aplicación';


-- -----------------------------------------------------
-- Table `cjalturas`.`coach`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cjalturas`.`coach` (
  `id_coach` INT NOT NULL AUTO_INCREMENT,
  `id_person` INT NOT NULL COMMENT 'Dirección de correo electrónico del instructor',
  `charge` VARCHAR(30) NOT NULL COMMENT 'Cargo que tiene el instructor',
  `licenseSST` VARCHAR(100) NOT NULL,
  `sign` VARCHAR(100) NOT NULL COMMENT 'Firma digital del instructor',
  PRIMARY KEY (`id_coach`),
  INDEX `fk_coach_person_idx` (`id_person` ASC),
  CONSTRAINT `fk_coach_person`
    FOREIGN KEY (`id_person`)
    REFERENCES `cjalturas`.`person` (`id_person`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Almacena la información de los aprendices registrados en la aplicación';


-- -----------------------------------------------------
-- Table `cjalturas`.`group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cjalturas`.`group` (
  `id_group` INT NOT NULL AUTO_INCREMENT,
  `id_coach` INT NULL COMMENT 'Entrenador encargado del grupo',
  `id_course` INT NOT NULL COMMENT 'Curso que se dictará para el grupo',
  `date_start` DATETIME NOT NULL COMMENT 'Fecha en la que inicia el curso',
  `observations` LONGTEXT NULL COMMENT 'Observaciones generales para el curso',
  PRIMARY KEY (`id_group`),
  INDEX `fk_group_coach_idx` (`id_coach` ASC),
  INDEX `fk_group_course_idx` (`id_course` ASC),
  CONSTRAINT `fk_group_coach`
    FOREIGN KEY (`id_coach`)
    REFERENCES `cjalturas`.`coach` (`id_coach`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_group_course`
    FOREIGN KEY (`id_course`)
    REFERENCES `cjalturas`.`course` (`id_course`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cjalturas`.`status`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cjalturas`.`status` (
  `code` VARCHAR(5) NOT NULL,
  `status` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`code`))
ENGINE = InnoDB
COMMENT = 'Posibles estados de la inscripción de un aprendiz';


-- -----------------------------------------------------
-- Table `cjalturas`.`inscription`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cjalturas`.`inscription` (
  `id_inscription` INT NOT NULL AUTO_INCREMENT,
  `id_learner` INT NOT NULL COMMENT 'Aprendiz que realizó la inscripción',
  `id_group` INT NOT NULL COMMENT 'Grupo al que se realizó la inscripción',
  `date_inscription` DATETIME NOT NULL COMMENT 'Fecha en la que el aprendiz realizó la inscripción al curso',
  `code_status` VARCHAR(5) NOT NULL,
  `date_certification` DATETIME NULL COMMENT 'Fecha de certificación',
  PRIMARY KEY (`id_inscription`),
  INDEX `fk_inscription_learner_idx` (`id_learner` ASC),
  INDEX `fk_inscription_group_idx` (`id_group` ASC),
  INDEX `fk_inscription_status_idx` (`code_status` ASC),
  CONSTRAINT `fk_inscription_learner`
    FOREIGN KEY (`id_learner`)
    REFERENCES `cjalturas`.`learner` (`id_learner`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_inscription_group`
    FOREIGN KEY (`id_group`)
    REFERENCES `cjalturas`.`group` (`id_group`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_inscription_status`
    FOREIGN KEY (`code_status`)
    REFERENCES `cjalturas`.`status` (`code`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `cjalturas`.`rol`
-- -----------------------------------------------------
START TRANSACTION;
USE `cjalturas`;
INSERT INTO `cjalturas`.`rol` (`code_rol`, `rol`) VALUES ('ADM', 'Administrador');
INSERT INTO `cjalturas`.`rol` (`code_rol`, `rol`) VALUES ('USR', 'Usuario');

COMMIT;

